package stream.inputstream;

import java.io.IOException;

/*
 * 입출력은 프로그램의 가장 기본 기능이지만, 외부 저장 장치나 네트워크와 연동해야 하기 때문에 장치에 따라 다르게 구현해야 한다.
 * 자바는 장치에 따라 독립적이고 효율적인 입출력 기능을 제공한다.
 * 
 * 스트림이란?
 * 자바에서 모든 입출력은 스트림(stream)을 통해 이루어진다.
 * 스트림이란 네트워크에서 유래된 용어이다.
 * 자료 흐름이 몰의 흐름과 같다는 의미에서 사용되었다.
 * 입출력 장치는 매우 다양하기 때문에 장치에 따라 입출력 부분을 일일이 다르게 구현을 하면 프로그램 호환성이 떨어질 수밖에 없다.
 * 이런 문제를 해결하기 위해 자바는 입출력 장치와 무관하고 일관성 있게 프로그램을 구현할 수 있도록 일종의 가상 통로인 스트림을 제공하는 것이다.
 * 자료를 읽어 들이려는 소스(source)와 자료를 쓰려는 대상(target)에 따라 각각 다른 스트림 클래스를 제공한다.
 * 자바 응용 프로그램 -------------------- 입출력 자료
 *                  스트림(가상 통로)
 * 자바에서 입출력 기능을 사용하는 곳은 파일 디스크, 키보드, 모니터, 메모리 입출력, 네트워크 등이 있다.
 * 이러한 곳에서 모든 입출력 기능을 스트림 클래스로 제공한다.
 * 따라서 자바에서 자료를 입출력하려면 여러 스트림 클래스에 대해 알아야 하지만, 구현 방식이 서로 비슷하므로 크게 걱정할 필요가 없다.
 * 
 * 입력 스트림과 출력 스트림
 * 어떤 대상으로부터 자료를 읽어 들일 때 사용하는 스트림이 입력 스트림이다.
 * 예를 들어 입력 스트림은 어떤 동영상을 재생하기 위해 동영상 파일에서 자료를 읽을 때 사용한다.
 * 편집 화면에 사용자가 쓴 글을 파일에 저장할 때는 출력 스트림을 사용한다.
 * 스트림은 단방향으로 자료가 이동하기 때문에 입력과 출력을 동시에 할 수 없다.
 * 입력 자료의 이동이 출력 자료의 이동과 한 스트림에서 동시에 일어날 수 없기 때문이다.
 * 일방 통행 외길에 차가 양방향으로 다닐 수 없는 것에 비유할 수 있다.
 * 따라서 어떤 스트림이 있다고 하면 그 스트림은 입력 스트림이거나 출력 스트림이다.
 * 					    입력 스트림
 * 				-------------------->
 * 자바 응용 프로그램 -------------------- 입출력 자료
 * 				<-------------------
 * 					    출력 스트림
 * 입력 스트림 : FileInputStream, FileReader, BufferedInputStream, BufferedReader 등
 * 출력 스트림 : FileOutputStream, FileWriter, BufferedOutputStream, BufferedWriter 등
 * 
 * 바이트 단위 스트림과 문자 단위 스트림
 * 원래 자바의 스트림은 바이트 단위로 자료의 입출력이 이루어진다.
 * 그러므로 그림, 동영상, 음악 파일 등 대부분 파일은 바이트 단위로 읽거나 쓰면 된다.
 * 그런데 자바에서 하나의 문자를 나타내는 char형은 2바이트이기 때문에 1바이트만 읽으면 한글 같은 문자는 깨진다.
 * 따라서 입출력 중 가장 많이 사용하는 자료인 문자를 위해 문자 스트림을 별도로 제공한다.
 * 즉 읽어 들이는 자료형에 따라 바이트용과 문자용 스트림이 있다.
 * 바이트 스트림 : FileInputStream, FileOutputStream, BufferedInputStream, BufferedOutputStream 등
 * 문자 스트림 : FileReader, FileWriter, BufferedReader, BufferedWriter 등
 * 
 * 기반 스트림과 보조 스트림
 * 마지막으로 어떤 스트림이 자료를 직접 읽거나 쓰는 기능을 제공하는 스트림인가,
 * 아니면 자료를 직접 읽거나 쓰는 기능은 없이 다른 스트림에 부가 기능을 제공하는가에 따라 기반 스트림과 보조 스트림으로 구분할 수 있다.
 * 기반 스트림은 읽어 들일 곳(소스)이나 써야 할 곳(대상)에서 직접 읽고 쓸 수 있으며 입출력 대상에 직접 연결되어 생성되는 스트림이다.
 * 반면에 보조 스트림은 직접 읽고 쓰는 기능은 없다.
 * 따라서 항상 다른 스트림을 포함하여 생성된다.
 * 즉 기반 스트림에 보조 스트림을 더하여 기능을 추가한다.
 * 기반 스트림 : FileInputStream, FileOutputStream, FileReader, FileWriter 등
 * 보조 스트림 : InputStreamReader, OutputStreamWriter, BufferedInputStream, BufferedOutputStream 등
 * 
 * 하나의 스트림 클래스는 세 가지 분류로 나눌 수 있다.
 * 예를 들어 FileInputStream은 입력 스트림이자, 바이트 스트림이자, 기반 스트림이다.
 * 
 * 표준 입출력
 * 자바에서는 화면에 출력하고 입력받는 표준 입출력 클래스를 미리 정의해 두었다.
 * 이 클래스는 프로그램이 시작될 때 생성되므로 따로 만들 필요가 없다.
 * 우리가 지금까지 화면 출력을 위해 사용한 System.out은 표준 출력을 위한 객체이다.
 * 표준 입출력은 콘솔 화면에 입출력된다고 해서 콘솔 입출력이라고도 한다.
 * 표준 입출력을 위한 System 클래스는 다음과 같이 세 개의 변수를 가지고 있다.
 *       자료형                  변수 이름           설명
 * static PrintStream	out		표준 출력 스트림 // 자료형에 사용한 PrintStream은 OutputStream의 하위 클래스이다.
 * static InputStream	in		표준 입력 스트림
 * static OutputStream	err		표준 오류 출력 스트림
 * System.out은 표준 출력용, System.in은 표준 입력용 스트림이다.
 * 빨간색으로 오류 메시지를 출력할 때는 System.err를 사용한다.
 */

public class SystemInTest1 {

	public static void main(String[] args) {
		System.out.println("알파벳 하나를 쓰고 [Enter]를 누르세요");
		
		int i;
		try {
			i = System.in.read(); // read() 메서드로 한 바이트 읽음
			System.out.println(i);
			System.out.println((char)i);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

}
